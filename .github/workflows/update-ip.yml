name: Update IP List

on:
  schedule:
    - cron: '10 * * * *'
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  update-ip:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create directories
        run: |
          mkdir -p ip data
          touch data/.gitkeep
          chmod 755 ip data
          echo "目录结构已创建:"
          tree -a ip data || ls -la ip data
          
      - name: Setup git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Create merge script
        run: |
          cat > /tmp/merge_ips.py << 'EOF'
          import os
          import glob
          
          def merge_ip_files(current_file, backup_file):
              try:
                  current_ips = set()
                  if os.path.exists(current_file):
                      with open(current_file) as f:
                          current_ips = set(line.strip() for line in f if line.strip())
                  
                  backup_ips = set()
                  if os.path.exists(backup_file):
                      with open(backup_file) as f:
                          backup_ips = set(line.strip() for line in f if line.strip())
                  
                  merged = sorted(current_ips | backup_ips)
                  
                  with open(current_file, 'w') as f:
                      f.write('\n'.join(merged))
                      if merged:
                          f.write('\n')
                  
                  return True
              except Exception as e:
                  print(f"合并文件 {current_file} 时出错: {str(e)}")
                  return False
          
          success = True
          for ip_file in glob.glob('ip/*.txt'):
              backup_file = os.path.join('/tmp/ip_backup', os.path.basename(ip_file))
              if not merge_ip_files(ip_file, backup_file):
                  success = False
          
          exit(0 if success else 1)
          EOF
          
      - name: Run IP update script
        env:
          TARGET_DOMAIN: ${{ secrets.TARGET_DOMAIN }}
          TARGET_PORTS: ${{ secrets.TARGET_PORTS }}
          TARGET_URLS: ${{ secrets.TARGET_URLS }}
          FORCE_UPDATE: "true"
        run: |
          max_retries=3
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if python ip.py; then
              echo "IP更新成功"
              break
            else
              echo "IP更新失败,正在重试($((retry_count+1))/$max_retries)"
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "::error::IP更新失败,已达到最大重试次数"
                exit 1
              fi
              sleep 5
            fi
          done
          
      - name: Process changes
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "检测到文件变更"
            git stash
            git fetch origin
            git reset --hard origin/main
            
            mkdir -p /tmp/ip_backup
            cp ip/*.txt /tmp/ip_backup/ 2>/dev/null || true
            
            git stash pop || true
            python /tmp/merge_ips.py
            
            if [ $? -ne 0 ]; then
              echo "IP列表合并失败"
              exit 1
            fi
            
            git add ip/
            git add data/ || true
            
            hour=$(TZ='Asia/Shanghai' date +%H)
            if [ "$hour" = "10" ]; then
              git commit -m "Update IP List and GeoIP Database ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))"
            else
              git commit -m "Update IP List ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))"
            fi
            
            max_retries=3
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if git push origin main; then
                echo "推送成功"
                break
              else
                echo "推送失败,正在重试($((retry_count+1))/$max_retries)"
                retry_count=$((retry_count+1))
                if [ $retry_count -eq $max_retries ]; then
                  echo "::error::推送失败,已达到最大重试次数"
                  exit 1
                fi
                git fetch origin
                git reset --hard origin/main
                python /tmp/merge_ips.py
                git add ip/
                if [ "$hour" = "10" ]; then
                  git commit -m "Update IP List and GeoIP Database ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))"
                else
                  git commit -m "Update IP List ($(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S'))"
                fi
                sleep 5
              fi
            done
          else
            echo "没有检测到文件变更"
          fi
          
      - name: Update Issue
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const time = new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' });
            const status = process.env.hour === '10' ? '✅ IP列表和GeoIP数据库已更新' : '✅ IP列表已更新';
            
            let ipStats = '';
            try {
              const fs = require('fs');
              const ipContent = fs.readFileSync('ip/ip.txt', 'utf8');
              const ips = ipContent.split('\n').filter(line => line.trim());
              const countries = {};
              ips.forEach(ip => {
                const country = ip.split('#')[1];
                countries[country] = (countries[country] || 0) + 1;
              });
              ipStats = Object.entries(countries)
                .map(([country, count]) => `${country}: ${count}个`)
                .join('\n');
            } catch (e) {
              ipStats = '无法读取IP统计信息';
            }
            
            const issueBody = `
            ## IP List Update Status
            
            🕒 更新时间: ${time}
            
            ### 更新状态
            ${status}
            
            ### IP统计
            \`\`\`
            ${ipStats}
            \`\`\`
            
            ### 文件状态
            \`\`\`
            ${require('child_process').execSync('git status -s').toString()}
            \`\`\`
            
            ### 目录内容
            IP目录:
            \`\`\`
            ${require('child_process').execSync('ls -l ip/').toString()}
            \`\`\`
            
            Data目录:
            \`\`\`
            ${require('child_process').execSync('ls -l data/').toString()}
            \`\`\`
            
            ---
            🤖 此消息由GitHub Actions自动生成
            `;
            
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['status'],
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'IP List Update Status',
                body: issueBody,
                labels: ['status']
              });
            }
